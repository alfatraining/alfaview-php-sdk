<?php
/**
 * CommonRoom
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * roomService/roomService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfaview\Model;

use \ArrayAccess;
use \Alfaview\ObjectSerializer;

/**
 * CommonRoom Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommonRoom implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'commonRoom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'display_name' => 'string',
        'quotas' => '\Alfaview\Model\CommonRoomQuotas',
        'allow_spectators' => 'bool',
        'type' => '\Alfaview\Model\CommonRoomType',
        'metadata' => 'map[string,string]',
        'permissions' => 'map[string,\Alfaview\Model\CommonPermissions]',
        'default_permissions' => '\Alfaview\Model\CommonPermissions',
        'sub_rooms' => 'map[string,\Alfaview\Model\CommonSubRoom]',
        'parent_id' => 'string',
        'sort' => 'string',
        'my_permissions' => '\Alfaview\Model\CommonPermissions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'display_name' => null,
        'quotas' => null,
        'allow_spectators' => 'boolean',
        'type' => null,
        'metadata' => null,
        'permissions' => null,
        'default_permissions' => null,
        'sub_rooms' => null,
        'parent_id' => null,
        'sort' => 'int64',
        'my_permissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'displayName',
        'quotas' => 'quotas',
        'allow_spectators' => 'allowSpectators',
        'type' => 'type',
        'metadata' => 'metadata',
        'permissions' => 'permissions',
        'default_permissions' => 'defaultPermissions',
        'sub_rooms' => 'subRooms',
        'parent_id' => 'parentId',
        'sort' => 'sort',
        'my_permissions' => 'myPermissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'quotas' => 'setQuotas',
        'allow_spectators' => 'setAllowSpectators',
        'type' => 'setType',
        'metadata' => 'setMetadata',
        'permissions' => 'setPermissions',
        'default_permissions' => 'setDefaultPermissions',
        'sub_rooms' => 'setSubRooms',
        'parent_id' => 'setParentId',
        'sort' => 'setSort',
        'my_permissions' => 'setMyPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'quotas' => 'getQuotas',
        'allow_spectators' => 'getAllowSpectators',
        'type' => 'getType',
        'metadata' => 'getMetadata',
        'permissions' => 'getPermissions',
        'default_permissions' => 'getDefaultPermissions',
        'sub_rooms' => 'getSubRooms',
        'parent_id' => 'getParentId',
        'sort' => 'getSort',
        'my_permissions' => 'getMyPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['quotas'] = isset($data['quotas']) ? $data['quotas'] : null;
        $this->container['allow_spectators'] = isset($data['allow_spectators']) ? $data['allow_spectators'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['default_permissions'] = isset($data['default_permissions']) ? $data['default_permissions'] : null;
        $this->container['sub_rooms'] = isset($data['sub_rooms']) ? $data['sub_rooms'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['my_permissions'] = isset($data['my_permissions']) ? $data['my_permissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets quotas
     *
     * @return \Alfaview\Model\CommonRoomQuotas
     */
    public function getQuotas()
    {
        return $this->container['quotas'];
    }

    /**
     * Sets quotas
     *
     * @param \Alfaview\Model\CommonRoomQuotas $quotas quotas
     *
     * @return $this
     */
    public function setQuotas($quotas)
    {
        $this->container['quotas'] = $quotas;

        return $this;
    }

    /**
     * Gets allow_spectators
     *
     * @return bool
     */
    public function getAllowSpectators()
    {
        return $this->container['allow_spectators'];
    }

    /**
     * Sets allow_spectators
     *
     * @param bool $allow_spectators allow_spectators
     *
     * @return $this
     */
    public function setAllowSpectators($allow_spectators)
    {
        $this->container['allow_spectators'] = $allow_spectators;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Alfaview\Model\CommonRoomType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Alfaview\Model\CommonRoomType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return map[string,\Alfaview\Model\CommonPermissions]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param map[string,\Alfaview\Model\CommonPermissions] $permissions permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets default_permissions
     *
     * @return \Alfaview\Model\CommonPermissions
     */
    public function getDefaultPermissions()
    {
        return $this->container['default_permissions'];
    }

    /**
     * Sets default_permissions
     *
     * @param \Alfaview\Model\CommonPermissions $default_permissions default_permissions
     *
     * @return $this
     */
    public function setDefaultPermissions($default_permissions)
    {
        $this->container['default_permissions'] = $default_permissions;

        return $this;
    }

    /**
     * Gets sub_rooms
     *
     * @return map[string,\Alfaview\Model\CommonSubRoom]
     */
    public function getSubRooms()
    {
        return $this->container['sub_rooms'];
    }

    /**
     * Sets sub_rooms
     *
     * @param map[string,\Alfaview\Model\CommonSubRoom] $sub_rooms sub_rooms
     *
     * @return $this
     */
    public function setSubRooms($sub_rooms)
    {
        $this->container['sub_rooms'] = $sub_rooms;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets my_permissions
     *
     * @return \Alfaview\Model\CommonPermissions
     */
    public function getMyPermissions()
    {
        return $this->container['my_permissions'];
    }

    /**
     * Sets my_permissions
     *
     * @param \Alfaview\Model\CommonPermissions $my_permissions my_permissions
     *
     * @return $this
     */
    public function setMyPermissions($my_permissions)
    {
        $this->container['my_permissions'] = $my_permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


