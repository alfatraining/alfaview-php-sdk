<?php
/**
 * AuthenticationAuthenticationUpdateReply
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * authService/authenticationService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfaview\Model;

use \ArrayAccess;
use \Alfaview\ObjectSerializer;

/**
 * AuthenticationAuthenticationUpdateReply Class Doc Comment
 *
 * @category Class
 * @description AuthenticationUpdateReply contains all fields of &#x60;common.ReplyInfo&#x60; plus an actual &#x60;common.ReplyInfo&#x60; and a &#x60;common.TrackingInfo&#x60;.  The original implementation of the &#x60;authenticationUpdate&#x60; endpoint just returned a &#x60;common.ReplyInfo&#x60;, there was no &#x60;AuthenticationUpdateReply&#x60; message defined initially. In order to stay backwards-compatible and have the ability to a) allow the new gRPC interceptors to work without hacks and b) allow us to return a tracking info if the call resulted in a gokjÅ« being kicked off, the new &#x60;AuthenticationUpdateReply&#x60; message was added.
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthenticationAuthenticationUpdateReply implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'authenticationAuthenticationUpdateReply';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_id' => 'string',
        'status_code' => '\Alfaview\Model\CommonReplyStatusCode',
        'status_message' => 'string',
        'reply_info' => '\Alfaview\Model\CommonReplyInfo',
        'tracking_info' => '\Alfaview\Model\CommonTrackingInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_id' => null,
        'status_code' => null,
        'status_message' => null,
        'reply_info' => null,
        'tracking_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'status_code' => 'statusCode',
        'status_message' => 'statusMessage',
        'reply_info' => 'replyInfo',
        'tracking_info' => 'trackingInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'status_code' => 'setStatusCode',
        'status_message' => 'setStatusMessage',
        'reply_info' => 'setReplyInfo',
        'tracking_info' => 'setTrackingInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'status_code' => 'getStatusCode',
        'status_message' => 'getStatusMessage',
        'reply_info' => 'getReplyInfo',
        'tracking_info' => 'getTrackingInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['reply_info'] = isset($data['reply_info']) ? $data['reply_info'] : null;
        $this->container['tracking_info'] = isset($data['tracking_info']) ? $data['tracking_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return \Alfaview\Model\CommonReplyStatusCode
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param \Alfaview\Model\CommonReplyStatusCode $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string $status_message status_message
     *
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets reply_info
     *
     * @return \Alfaview\Model\CommonReplyInfo
     */
    public function getReplyInfo()
    {
        return $this->container['reply_info'];
    }

    /**
     * Sets reply_info
     *
     * @param \Alfaview\Model\CommonReplyInfo $reply_info reply_info
     *
     * @return $this
     */
    public function setReplyInfo($reply_info)
    {
        $this->container['reply_info'] = $reply_info;

        return $this;
    }

    /**
     * Gets tracking_info
     *
     * @return \Alfaview\Model\CommonTrackingInfo
     */
    public function getTrackingInfo()
    {
        return $this->container['tracking_info'];
    }

    /**
     * Sets tracking_info
     *
     * @param \Alfaview\Model\CommonTrackingInfo $tracking_info tracking_info
     *
     * @return $this
     */
    public function setTrackingInfo($tracking_info)
    {
        $this->container['tracking_info'] = $tracking_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


