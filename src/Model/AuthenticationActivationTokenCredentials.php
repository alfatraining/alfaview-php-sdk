<?php
/**
 * AuthenticationActivationTokenCredentials
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * userService/userService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfaview\Model;

use \ArrayAccess;
use \Alfaview\ObjectSerializer;

/**
 * AuthenticationActivationTokenCredentials Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthenticationActivationTokenCredentials implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'authenticationActivationTokenCredentials';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activation_token' => 'string',
        'code' => 'string',
        'company_id' => 'string',
        'expiry' => 'string',
        'key_type' => 'string',
        'principal' => 'string',
        'finish_signup_url' => 'string',
        'resend_invitation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activation_token' => null,
        'code' => null,
        'company_id' => null,
        'expiry' => 'int64',
        'key_type' => null,
        'principal' => null,
        'finish_signup_url' => null,
        'resend_invitation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_token' => 'activationToken',
        'code' => 'code',
        'company_id' => 'companyId',
        'expiry' => 'expiry',
        'key_type' => 'keyType',
        'principal' => 'principal',
        'finish_signup_url' => 'finishSignupURL',
        'resend_invitation' => 'resendInvitation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activation_token' => 'setActivationToken',
        'code' => 'setCode',
        'company_id' => 'setCompanyId',
        'expiry' => 'setExpiry',
        'key_type' => 'setKeyType',
        'principal' => 'setPrincipal',
        'finish_signup_url' => 'setFinishSignupUrl',
        'resend_invitation' => 'setResendInvitation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activation_token' => 'getActivationToken',
        'code' => 'getCode',
        'company_id' => 'getCompanyId',
        'expiry' => 'getExpiry',
        'key_type' => 'getKeyType',
        'principal' => 'getPrincipal',
        'finish_signup_url' => 'getFinishSignupUrl',
        'resend_invitation' => 'getResendInvitation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_token'] = isset($data['activation_token']) ? $data['activation_token'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['key_type'] = isset($data['key_type']) ? $data['key_type'] : null;
        $this->container['principal'] = isset($data['principal']) ? $data['principal'] : null;
        $this->container['finish_signup_url'] = isset($data['finish_signup_url']) ? $data['finish_signup_url'] : null;
        $this->container['resend_invitation'] = isset($data['resend_invitation']) ? $data['resend_invitation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activation_token
     *
     * @return string
     */
    public function getActivationToken()
    {
        return $this->container['activation_token'];
    }

    /**
     * Sets activation_token
     *
     * @param string $activation_token activation_token
     *
     * @return $this
     */
    public function setActivationToken($activation_token)
    {
        $this->container['activation_token'] = $activation_token;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id company_id
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets key_type
     *
     * @return string
     */
    public function getKeyType()
    {
        return $this->container['key_type'];
    }

    /**
     * Sets key_type
     *
     * @param string $key_type key_type
     *
     * @return $this
     */
    public function setKeyType($key_type)
    {
        $this->container['key_type'] = $key_type;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return string
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param string $principal principal
     *
     * @return $this
     */
    public function setPrincipal($principal)
    {
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets finish_signup_url
     *
     * @return string
     */
    public function getFinishSignupUrl()
    {
        return $this->container['finish_signup_url'];
    }

    /**
     * Sets finish_signup_url
     *
     * @param string $finish_signup_url finish_signup_url
     *
     * @return $this
     */
    public function setFinishSignupUrl($finish_signup_url)
    {
        $this->container['finish_signup_url'] = $finish_signup_url;

        return $this;
    }

    /**
     * Gets resend_invitation
     *
     * @return bool
     */
    public function getResendInvitation()
    {
        return $this->container['resend_invitation'];
    }

    /**
     * Sets resend_invitation
     *
     * @param bool $resend_invitation resend_invitation
     *
     * @return $this
     */
    public function setResendInvitation($resend_invitation)
    {
        $this->container['resend_invitation'] = $resend_invitation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


