<?php
/**
 * CommonBranding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * companyService/companyService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfaview\Model;

use \ArrayAccess;
use \Alfaview\ObjectSerializer;

/**
 * CommonBranding Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommonBranding implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'commonBranding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'navbar_bg' => 'string',
        'logo_url' => 'string',
        'logo_height' => 'string',
        'logo_width' => 'string',
        'enabled' => 'bool',
        'logo_alternative_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
        'navbar_bg' => null,
        'logo_url' => null,
        'logo_height' => 'int64',
        'logo_width' => 'int64',
        'enabled' => 'boolean',
        'logo_alternative_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'navbar_bg' => 'navbarBg',
        'logo_url' => 'logoURL',
        'logo_height' => 'logoHeight',
        'logo_width' => 'logoWidth',
        'enabled' => 'enabled',
        'logo_alternative_url' => 'logoAlternativeURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'navbar_bg' => 'setNavbarBg',
        'logo_url' => 'setLogoUrl',
        'logo_height' => 'setLogoHeight',
        'logo_width' => 'setLogoWidth',
        'enabled' => 'setEnabled',
        'logo_alternative_url' => 'setLogoAlternativeUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'navbar_bg' => 'getNavbarBg',
        'logo_url' => 'getLogoUrl',
        'logo_height' => 'getLogoHeight',
        'logo_width' => 'getLogoWidth',
        'enabled' => 'getEnabled',
        'logo_alternative_url' => 'getLogoAlternativeUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['navbar_bg'] = isset($data['navbar_bg']) ? $data['navbar_bg'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['logo_height'] = isset($data['logo_height']) ? $data['logo_height'] : null;
        $this->container['logo_width'] = isset($data['logo_width']) ? $data['logo_width'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['logo_alternative_url'] = isset($data['logo_alternative_url']) ? $data['logo_alternative_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets navbar_bg
     *
     * @return string
     */
    public function getNavbarBg()
    {
        return $this->container['navbar_bg'];
    }

    /**
     * Sets navbar_bg
     *
     * @param string $navbar_bg navbar_bg
     *
     * @return $this
     */
    public function setNavbarBg($navbar_bg)
    {
        $this->container['navbar_bg'] = $navbar_bg;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets logo_height
     *
     * @return string
     */
    public function getLogoHeight()
    {
        return $this->container['logo_height'];
    }

    /**
     * Sets logo_height
     *
     * @param string $logo_height logo_height
     *
     * @return $this
     */
    public function setLogoHeight($logo_height)
    {
        $this->container['logo_height'] = $logo_height;

        return $this;
    }

    /**
     * Gets logo_width
     *
     * @return string
     */
    public function getLogoWidth()
    {
        return $this->container['logo_width'];
    }

    /**
     * Sets logo_width
     *
     * @param string $logo_width logo_width
     *
     * @return $this
     */
    public function setLogoWidth($logo_width)
    {
        $this->container['logo_width'] = $logo_width;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets logo_alternative_url
     *
     * @return string
     */
    public function getLogoAlternativeUrl()
    {
        return $this->container['logo_alternative_url'];
    }

    /**
     * Sets logo_alternative_url
     *
     * @param string $logo_alternative_url logo_alternative_url
     *
     * @return $this
     */
    public function setLogoAlternativeUrl($logo_alternative_url)
    {
        $this->container['logo_alternative_url'] = $logo_alternative_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


