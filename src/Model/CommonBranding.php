<?php
/**
 * CommonBranding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * companyService/companyService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfaview\Model;

use \ArrayAccess;
use \Alfaview\ObjectSerializer;

/**
 * CommonBranding Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommonBranding implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'commonBranding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'logo_url' => 'string',
        'enabled' => 'bool',
        'logo_square48_url' => 'string',
        'logo_square96_url' => 'string',
        'logo_square256_url' => 'string',
        'stock_branding_disabled' => 'bool',
        'logo_in_meeting_room_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'logo_url' => null,
        'enabled' => null,
        'logo_square48_url' => null,
        'logo_square96_url' => null,
        'logo_square256_url' => null,
        'stock_branding_disabled' => null,
        'logo_in_meeting_room_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'logo_url' => 'logoURL',
        'enabled' => 'enabled',
        'logo_square48_url' => 'logoSquare48URL',
        'logo_square96_url' => 'logoSquare96URL',
        'logo_square256_url' => 'logoSquare256URL',
        'stock_branding_disabled' => 'stockBrandingDisabled',
        'logo_in_meeting_room_enabled' => 'logoInMeetingRoomEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'logo_url' => 'setLogoUrl',
        'enabled' => 'setEnabled',
        'logo_square48_url' => 'setLogoSquare48Url',
        'logo_square96_url' => 'setLogoSquare96Url',
        'logo_square256_url' => 'setLogoSquare256Url',
        'stock_branding_disabled' => 'setStockBrandingDisabled',
        'logo_in_meeting_room_enabled' => 'setLogoInMeetingRoomEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'logo_url' => 'getLogoUrl',
        'enabled' => 'getEnabled',
        'logo_square48_url' => 'getLogoSquare48Url',
        'logo_square96_url' => 'getLogoSquare96Url',
        'logo_square256_url' => 'getLogoSquare256Url',
        'stock_branding_disabled' => 'getStockBrandingDisabled',
        'logo_in_meeting_room_enabled' => 'getLogoInMeetingRoomEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['logo_square48_url'] = isset($data['logo_square48_url']) ? $data['logo_square48_url'] : null;
        $this->container['logo_square96_url'] = isset($data['logo_square96_url']) ? $data['logo_square96_url'] : null;
        $this->container['logo_square256_url'] = isset($data['logo_square256_url']) ? $data['logo_square256_url'] : null;
        $this->container['stock_branding_disabled'] = isset($data['stock_branding_disabled']) ? $data['stock_branding_disabled'] : null;
        $this->container['logo_in_meeting_room_enabled'] = isset($data['logo_in_meeting_room_enabled']) ? $data['logo_in_meeting_room_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets logo_square48_url
     *
     * @return string
     */
    public function getLogoSquare48Url()
    {
        return $this->container['logo_square48_url'];
    }

    /**
     * Sets logo_square48_url
     *
     * @param string $logo_square48_url logo_square48_url
     *
     * @return $this
     */
    public function setLogoSquare48Url($logo_square48_url)
    {
        $this->container['logo_square48_url'] = $logo_square48_url;

        return $this;
    }

    /**
     * Gets logo_square96_url
     *
     * @return string
     */
    public function getLogoSquare96Url()
    {
        return $this->container['logo_square96_url'];
    }

    /**
     * Sets logo_square96_url
     *
     * @param string $logo_square96_url logo_square96_url
     *
     * @return $this
     */
    public function setLogoSquare96Url($logo_square96_url)
    {
        $this->container['logo_square96_url'] = $logo_square96_url;

        return $this;
    }

    /**
     * Gets logo_square256_url
     *
     * @return string
     */
    public function getLogoSquare256Url()
    {
        return $this->container['logo_square256_url'];
    }

    /**
     * Sets logo_square256_url
     *
     * @param string $logo_square256_url logo_square256_url
     *
     * @return $this
     */
    public function setLogoSquare256Url($logo_square256_url)
    {
        $this->container['logo_square256_url'] = $logo_square256_url;

        return $this;
    }

    /**
     * Gets stock_branding_disabled
     *
     * @return bool
     */
    public function getStockBrandingDisabled()
    {
        return $this->container['stock_branding_disabled'];
    }

    /**
     * Sets stock_branding_disabled
     *
     * @param bool $stock_branding_disabled stock_branding_disabled
     *
     * @return $this
     */
    public function setStockBrandingDisabled($stock_branding_disabled)
    {
        $this->container['stock_branding_disabled'] = $stock_branding_disabled;

        return $this;
    }

    /**
     * Gets logo_in_meeting_room_enabled
     *
     * @return bool
     */
    public function getLogoInMeetingRoomEnabled()
    {
        return $this->container['logo_in_meeting_room_enabled'];
    }

    /**
     * Sets logo_in_meeting_room_enabled
     *
     * @param bool $logo_in_meeting_room_enabled logo_in_meeting_room_enabled
     *
     * @return $this
     */
    public function setLogoInMeetingRoomEnabled($logo_in_meeting_room_enabled)
    {
        $this->container['logo_in_meeting_room_enabled'] = $logo_in_meeting_room_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


