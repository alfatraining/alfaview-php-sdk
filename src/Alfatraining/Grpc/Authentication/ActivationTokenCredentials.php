<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: authentication/authenticationService.proto

namespace Alfatraining\Grpc\Authentication;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 * ActivationTokenCredentials are used to provide a way of creating users on our
 * platform that need to finish signing up for themselves. They are used alongside
 * other credential messages and provide the following additional features:
 *   - issue short-lived temporary token (60 seconds or less) without any
 *     backend permissions in order to fetch information that's been added
 *     for them (most notably, their user profile or information about the
 *     company they are joining like the company's display name)
 *   - activate/create the authentication method they were assigned
 *     to be used with (like UsernamePasswordCredentials)
 *   - expire after a customizable amount of time (30 days by default)
 *   - can be deactivated/blocked before they expire (just like any other
 *     authentication method we have)
 *   - when creating activation token credentials pass *expiry*, *keyType* and *principal*
 *
 * Generated from protobuf message <code>authentication.ActivationTokenCredentials</code>
 */
class ActivationTokenCredentials extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string activationToken = 1;</code>
     */
    private $activationToken = '';
    /**
     *&#47; password, should be something random
     *
     * Generated from protobuf field <code>string code = 2;</code>
     */
    private $code = '';
    /**
     * Generated from protobuf field <code>string companyId = 3;</code>
     */
    private $companyId = '';
    /**
     *&#47; optional, unix timestamp; will default to 30 days from the time the activation token credentials are created, accepts something in the far future (subject to change)
     *
     * Generated from protobuf field <code>int64 expiry = 4;</code>
     */
    private $expiry = 0;
    /**
     *&#47; the key type to register this for (password, ldap, etc.)
     *
     * Generated from protobuf field <code>string keyType = 5;</code>
     */
    private $keyType = '';
    /**
     *&#47; the principal for the key type above, for UsernamePasswordCredentials it's the username, for AuthorizationCodeCredentials it'd be the client ID
     *
     * Generated from protobuf field <code>string principal = 6;</code>
     */
    private $principal = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $activationToken
     *     @type string $code
     *          &#47; password, should be something random
     *     @type string $companyId
     *     @type int|string $expiry
     *          &#47; optional, unix timestamp; will default to 30 days from the time the activation token credentials are created, accepts something in the far future (subject to change)
     *     @type string $keyType
     *          &#47; the key type to register this for (password, ldap, etc.)
     *     @type string $principal
     *          &#47; the principal for the key type above, for UsernamePasswordCredentials it's the username, for AuthorizationCodeCredentials it'd be the client ID
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Authentication\AuthenticationService::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string activationToken = 1;</code>
     * @return string
     */
    public function getActivationToken()
    {
        return $this->activationToken;
    }

    /**
     * Generated from protobuf field <code>string activationToken = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setActivationToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->activationToken = $var;

        return $this;
    }

    /**
     *&#47; password, should be something random
     *
     * Generated from protobuf field <code>string code = 2;</code>
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     *&#47; password, should be something random
     *
     * Generated from protobuf field <code>string code = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->code = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string companyId = 3;</code>
     * @return string
     */
    public function getCompanyId()
    {
        return $this->companyId;
    }

    /**
     * Generated from protobuf field <code>string companyId = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setCompanyId($var)
    {
        GPBUtil::checkString($var, True);
        $this->companyId = $var;

        return $this;
    }

    /**
     *&#47; optional, unix timestamp; will default to 30 days from the time the activation token credentials are created, accepts something in the far future (subject to change)
     *
     * Generated from protobuf field <code>int64 expiry = 4;</code>
     * @return int|string
     */
    public function getExpiry()
    {
        return $this->expiry;
    }

    /**
     *&#47; optional, unix timestamp; will default to 30 days from the time the activation token credentials are created, accepts something in the far future (subject to change)
     *
     * Generated from protobuf field <code>int64 expiry = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setExpiry($var)
    {
        GPBUtil::checkInt64($var);
        $this->expiry = $var;

        return $this;
    }

    /**
     *&#47; the key type to register this for (password, ldap, etc.)
     *
     * Generated from protobuf field <code>string keyType = 5;</code>
     * @return string
     */
    public function getKeyType()
    {
        return $this->keyType;
    }

    /**
     *&#47; the key type to register this for (password, ldap, etc.)
     *
     * Generated from protobuf field <code>string keyType = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setKeyType($var)
    {
        GPBUtil::checkString($var, True);
        $this->keyType = $var;

        return $this;
    }

    /**
     *&#47; the principal for the key type above, for UsernamePasswordCredentials it's the username, for AuthorizationCodeCredentials it'd be the client ID
     *
     * Generated from protobuf field <code>string principal = 6;</code>
     * @return string
     */
    public function getPrincipal()
    {
        return $this->principal;
    }

    /**
     *&#47; the principal for the key type above, for UsernamePasswordCredentials it's the username, for AuthorizationCodeCredentials it'd be the client ID
     *
     * Generated from protobuf field <code>string principal = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setPrincipal($var)
    {
        GPBUtil::checkString($var, True);
        $this->principal = $var;

        return $this;
    }

}

