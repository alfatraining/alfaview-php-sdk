<?php
/**
 * GuestServiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * guestServiceV2/guestService.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 * OpenAPI spec version: version not set
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Alfaview;

use Alfaview\Model\AuthenticationAuthorizationCodeCredentials;
use Alfaview\Model\CommonAccessToken;
use Alfaview\Model\CommonRoom;
use Alfaview\Model\CommonRoomQuotas;
use Alfaview\Model\GuestServiceV2GroupLinkCreation;
use Alfaview\Model\GuestServiceV2GuestLinkCreation;
use PHPUnit\Framework\TestCase;

/**
 * GuestServiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GuestServiceApiTest extends TestCase
{
    /* @var Alfaview $av */
    protected static $av;

    /* @var AuthenticationAuthorizationCodeCredentials $credentials */
    protected static $credentials;

    /* @var CommonAccessToken $accessToken */
    protected static $accessToken;

    /* @var $roomId */
    private static $roomId;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        self::$av = new Alfaview();
        self::$av->setHost(getenv('API_HOST'));
        self::$credentials = new AuthenticationAuthorizationCodeCredentials();
        self::$credentials->setClientId(getenv('API_CLIENT_ID'));
        self::$credentials->setCode(getenv('API_CODE'));
        self::$credentials->setCompanyId(getenv('API_COMPANY_ID'));
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $response = self::$av->authenticate(self::$credentials);
        $this->assertFalse($response->hasError);
        $this->assertNotEmpty($response->reply->getAccessToken());
        self::$accessToken = $response->reply->getAccessToken();

        // setup a room for testing
        $quotas = new CommonRoomQuotas();
        $quotas->setActiveParticipants(50);
        $quotas->setPassiveParticipants(0);
        $quotas->setSubRooms(10);

        $room = new CommonRoom();
        $room->setDisplayName('created by php sdk guest service v2 test');
        $room->setQuotas($quotas);

        $response = self::$av->createRoom(self::$accessToken, $room);
        $this->assertFalse($response->hasError);

        self::$roomId = $response->reply->getRoomId();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
       $response = self::$av->destroyRoom(self::$accessToken, self::$roomId);
       $this->assertFalse($response->hasError);
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createGroupLinks
     * .
     */
    public function testCreateGroupLinks()
    {
        $validUntil = new \DateTime("next week today");

        // get the `Participant` permission group id to use in our group link
        $participantGroupId = self::$av->getPermissionGroupId(self::$accessToken, 'Participant');
        $this->assertNotEmpty($participantGroupId);

        $groupLink = new GuestServiceV2GroupLinkCreation();
        $groupLink->setPermissionGroupId($participantGroupId);
        $groupLink->setDescription("created by alfaview-php-sdk testCreateGroupLinks");
        $groupLink->setValidUntil($validUntil);

        $response = self::$av->createGroupLink(self::$accessToken, self::$roomId, [$groupLink]);
        $this->assertFalse($response->hasError);

        /* @var \Alfaview\Model\GuestServiceV2CreateGroupLinksReply $reply */
        $reply = $response->reply;
        $this->assertIsArray($reply->getGroupLinks());

        $groupLink = $reply->getGroupLinks()[0];
        $this->assertNotEmpty($groupLink->getAccessKey());
        $this->assertIsString(filter_var($groupLink->getJoinLink(), FILTER_VALIDATE_URL));
    }

    /**
     * Test case for createGuestLinks
     * .
     */
    public function testCreateGuestLinks()
    {
        $validUntil = new \DateTime("next week today");

        // get the `Participant` permission group id to use in our guest link
        $participantGroupId = self::$av->getPermissionGroupId(self::$accessToken, 'Participant');
        $this->assertNotEmpty($participantGroupId);

        $guestLink = new GuestServiceV2GuestLinkCreation();
        $guestLink->setPermissionGroupId($participantGroupId);
        $guestLink->setDisplayName("Test php-sdk Guest");
        $guestLink->setValidUntil($validUntil);
        $guestLink->setEmail("test@example.com");
        $guestLink->setSendEmail(false);
        $guestLink->setLocale("en-US");

        $response = self::$av->createGuestLink(self::$accessToken, self::$roomId, [$guestLink]);
        $this->assertFalse($response->hasError);

        /* @var \Alfaview\Model\GuestServiceV2CreateGuestLinksReply $reply */
        $reply = $response->reply;
        $this->assertIsArray($reply->getGuestLinks());

        /* @var \Alfaview\Model\GuestServiceV2GuestLink $guestLink */
        $guestLink = $reply->getGuestLinks()[0];

        $this->assertNotEmpty($guestLink->getAccessKey());
        $this->assertIsString(filter_var($guestLink->getJoinLink(), FILTER_VALIDATE_URL));
    }

    /**
     * Test case for authenticate
     * .
     */
    public function testAuthenticate()
    {
        $validUntil = new \DateTime("next week today");

        // get the `Participant` permission group id to use in our group link
        $participantGroupId = self::$av->getPermissionGroupId(self::$accessToken, 'Participant');
        $this->assertNotEmpty($participantGroupId);

        $groupLink = new GuestServiceV2GroupLinkCreation();
        $groupLink->setPermissionGroupId($participantGroupId);
        $groupLink->setDescription("created by alfaview-php-sdk testCreateGroupLinks");
        $groupLink->setValidUntil($validUntil);

        $response = self::$av->createGroupLink(self::$accessToken, self::$roomId, [$groupLink]);
        $this->assertFalse($response->hasError);

        /* @var \Alfaview\Model\GuestServiceV2CreateGroupLinksReply $reply */
        $createGroupLinkReply = $response->reply;
        $this->assertIsArray($createGroupLinkReply->getGroupLinks());

        /* @var \Alfaview\Model\GuestServiceV2GroupLink $groupLink */
        $groupLink = $createGroupLinkReply->getGroupLinks()[0];

        $externalId = md5("unique-external-id-value-for-group-link");
        $response = self::$av->guestAuthenticate(
            self::$credentials->getCompanyId(),
            self::$roomId,
            $groupLink->getAccessKey(),
            'John Doe',
            $externalId
        );

        $this->assertFalse($response->hasError);
        $this->assertNotEmpty($response->reply->getAccessToken());
    }

    /**
     * Test case for deleteLink
     * .
     */
    public function testDeleteLink()
    {
    }

    /**
     * Test case for getGroupLink
     * .
     */
    public function testGetGroupLink()
    {
    }

    /**
     * Test case for getGuestLink
     * .
     */
    public function testGetGuestLink()
    {
        $response = self::$av->listGuestLinks(self::$accessToken, self::$roomId);
        $this->assertFalse($response->hasError);
    }

    /**
     * Test case for listGroupLinks
     * .
     */
    public function testListGroupLinks()
    {
        // this will list all the group links in the company since no $roomId is passed
        $response = self::$av->listGroupLinks(self::$accessToken);
        $this->assertFalse($response->hasError);
    }

    /**
     * Test case for listGroupLinks
     * .
     */
    public function testGetLink()
    {
        $participantGroupId = self::$av->getPermissionGroupId(self::$accessToken, 'Participant');
        $this->assertNotEmpty($participantGroupId);

        $groupLink = new GuestServiceV2GroupLinkCreation();
        $groupLink->setPermissionGroupId($participantGroupId);
        $groupLink->setDescription("created by alfaview-php-sdk testCreateGroupLinks");

        $response = self::$av->createGroupLink(self::$accessToken, self::$roomId, [$groupLink]);
        $this->assertFalse($response->hasError);

        /* @var \Alfaview\Model\GuestServiceV2CreateGroupLinksReply $reply */
        $createGroupLinkReply = $response->reply;
        $this->assertIsArray($createGroupLinkReply->getGroupLinks());

        /* @var \Alfaview\Model\GuestServiceV2GroupLink $groupLink */
        $groupLink = $createGroupLinkReply->getGroupLinks()[0];

        $response = self::$av->getLink(self::$accessToken, $groupLink->getId());
        $this->assertFalse($response->hasError);
    }

    /**
     * Test case for listGuestLinks
     * .
     */
    public function testListGuestLinks()
    {
    }

    /**
     * Test case for resendGuestLinkEmail
     * .
     */
    public function testResendGuestLinkEmail()
    {
    }

    /**
     * Test case for updateGroupLink
     * .
     */
    public function testUpdateGroupLink()
    {
    }

    /**
     * Test case for updateGuestLink
     * .
     */
    public function testUpdateGuestLink()
    {
    }
}
