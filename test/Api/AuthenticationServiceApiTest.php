<?php
/**
 * AuthenticationServiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * authentication/authenticationService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Alfaview;

use Alfaview\Model\AuthenticationAuthorizationCodeCredentials;
use Alfaview\Model\AuthenticationGuestAccessCredentials;
use Alfaview\Model\AuthenticationUsernamePasswordCredentials;
use Alfaview\Model\CommonAccessToken;
use Alfaview\Model\CommonPermissions;
use Alfaview\Model\CommonRoom;

/**
 * AuthenticationServiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthenticationServiceApiTest extends \PHPUnit_Framework_TestCase
{
    /* @var Alfaview $av */
    protected static $av;

    /* @var AuthenticationAuthorizationCodeCredentials $credentials */
    protected static $credentials;

    /* @var CommonAccessToken $accessToken */
    protected static $accessToken;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        self::$av = new Alfaview();
        self::$av->setHost(getenv('API_HOST'));
        self::$credentials = new AuthenticationAuthorizationCodeCredentials();
        self::$credentials->setClientId(getenv('API_CLIENT_ID'));
        self::$credentials->setCode(getenv('API_CODE'));
        self::$credentials->setCompanyId(getenv('API_COMPANY_ID'));
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for authenticate
     *
     * .
     *
     */
    public function testAuthenticate()
    {
        $response = self::$av->authenticate(self::$credentials);
        $this->assertFalse($response->hasError);

        $this->assertNotEmpty($response->reply->getAccessToken());
        self::$accessToken = $response->reply->getAccessToken();
    }

    /**
     * Test case for authenticationCreate
     *
     * .
     *
     */
    public function testAuthenticationCreate()
    {
        $room = new CommonRoom();
        $room->setDisplayName('created by php sdk authentication service test');

        $response = self::$av->createRoom(self::$accessToken, $room);
        $this->assertFalse($response->hasError);

        $roomId = $response->reply->getRoomId();

        $guestAccessCredentials = new AuthenticationGuestAccessCredentials();
        $guestAccessCredentials->setDisplayName("shareable guest created by api");
        $guestAccessCredentials->setShareable(true);
        $guestAccessCredentials->setExpiry(strval(time() + (7 * 24 * 60 * 60)));
        $guestAccessCredentials->setRoomId($response->reply->getRoomId());
        $guestAccessCredentials->setCompanyId(getenv('API_COMPANY_ID'));
        $guestAccessCredentials->setCode(getenv('API_GUEST_CODE'));

        $response = self::$av->createAuthentication(self::$accessToken, $guestAccessCredentials);
        $this->assertFalse($response->hasError);

        $guestId = $response->reply->getUserId();

        $guestPermissions = new CommonPermissions();
        $guestPermissions->setVoice(true);
        $guestPermissions->setVideo(true);
        $guestPermissions->setJoin(true);
        $guestPermissions->setAction(true);
        $guestPermissions->setFairUse(true);

        $room = new CommonRoom();
        $room->setPermissions(array($guestId => $guestPermissions));

        $response = self::$av->updateRoom(self::$accessToken, $roomId, $room);
        $this->assertFalse($response->hasError);

        $credentials = new AuthenticationGuestAccessCredentials();
        $credentials->setUserId($guestId);
        $credentials->setRoomId($roomId);
        $credentials->setDisplayName("Donald Duck");
        $credentials->setCode(getenv('API_GUEST_CODE'));
        $credentials->setCompanyId(getenv('API_COMPANY_ID'));

        $response = self::$av->authenticate($credentials);
        $this->assertFalse($response->hasError);
        $this->assertNotEmpty($response->reply->getAccessToken());

        $response = self::$av->createJoinLink($response->reply->getAccessToken(), $roomId);
        $this->assertFalse($response->hasError);
    }

    /**
     * Test case for authenticationInformation
     *
     * .
     *
     */
    public function testAuthenticationInformation()
    {
    }

    /**
     * Test case for authenticationUpdate
     *
     * .
     *
     */
    public function testAuthenticationUpdate()
    {
    }

    /**
     * Test case for isAuthenticated
     *
     * .
     *
     */
    public function testIsAuthenticated()
    {
        $response = self::$av->isAuthenticated(self::$accessToken);

        self::assertFalse($response->hasError);
        self::assertEquals("You were authenticated successfully", $response->reply->getStatusMessage());
    }

    /**
     * Test case for listAuthentications
     *
     * .
     *
     */
    public function testListAuthentications()
    {
    }

    /**
     * Test case for listGuestAccounts
     *
     * .
     *
     */
    public function testListGuestAccounts()
    {
    }

    /**
     * Test case for requestPasswordReset
     *
     * .
     *
     */
    public function testRequestPasswordReset()
    {
    }

    /**
     * Test case for signAccessToken
     *
     * .
     *
     */
    public function testSignAccessToken()
    {
    }
}
