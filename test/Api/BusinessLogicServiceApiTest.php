<?php
/**
 * BusinessLogicServiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * businessLogicService/businessLogicService.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Alfaview;

use PHPUnit\Framework\TestCase;

use \Alfaview\Configuration;
use \Alfaview\ApiException;
use Alfaview\Model\AuthenticationAuthorizationCodeCredentials;
use Alfaview\Model\BusinessLogicServiceExternalMemberInvitation;
use Alfaview\Model\CommonAccessToken;
use Alfaview\Model\CommonRoom;
use Alfaview\Model\CommonRoomQuotas;
use \Alfaview\ObjectSerializer;

/**
 * BusinessLogicServiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Alfaview
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessLogicServiceApiTest extends TestCase
{
    /* @var Alfaview $av */
    protected static $av;

    /* @var AuthenticationAuthorizationCodeCredentials $credentials */
    protected static $credentials;

    /* @var CommonAccessToken $accessToken */
    protected static $accessToken;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        self::$av = new Alfaview();
        self::$av->setHost(getenv('API_HOST'));
        self::$credentials = new AuthenticationAuthorizationCodeCredentials();
        self::$credentials->setClientId(getenv('API_CLIENT_ID'));
        self::$credentials->setCode(getenv('API_CODE'));
        self::$credentials->setCompanyId(getenv('API_COMPANY_ID'));
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $response = self::$av->authenticate(self::$credentials);
        $this->assertFalse($response->hasError);
        $this->assertNotEmpty($response->reply->getAccessToken());
        self::$accessToken = $response->reply->getAccessToken();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for businessLogicServiceCompanyDestroy
     *
     * .
     *
     */
    public function testBusinessLogicServiceCompanyDestroy()
    {
    }

    /**
     * Test case for businessLogicServiceCompanySignup
     *
     * .
     *
     */
    public function testBusinessLogicServiceCompanySignup()
    {
    }

    /**
     * Test case for businessLogicServiceCreateCompany
     *
     * .
     *
     */
    public function testBusinessLogicServiceCreateCompany()
    {
    }

    /**
     * Test case for businessLogicServiceExternalMembersInvite
     *
     * .
     *
     */
    public function testBusinessLogicServiceExternalMembersInvite()
    {
        $quotas = new CommonRoomQuotas();
        $quotas->setActiveParticipants(50);
        $quotas->setPassiveParticipants(0);
        $quotas->setSubRooms(10);

        $room = new CommonRoom();
        $room->setDisplayName('created by php sdk room service test');
        $room->setQuotas($quotas);

        $createRoomResponse = self::$av->createRoom(self::$accessToken, $room);
        $this->assertFalse($createRoomResponse->hasError);
        $this->assertNotEmpty($createRoomResponse->reply->getRoomId());

        $participantGroupId = self::$av->getPermissionGroupId(self::$accessToken, 'Participant');
        $this->assertNotEmpty($participantGroupId);

        $invitation = new BusinessLogicServiceExternalMemberInvitation();
        $invitation->setDisplayName("Test User");
        $invitation->setEmail("test.user@alfaview.com");
        $invitation->setLocale("en-US");
        $invitation->setPermissionGroupId($participantGroupId);
        $invitation->setSendEmail(false);
        $invitation->setExpiry(-1);
        $invitations [] = $invitation;

        $inviteExternalMembersResponse = self::$av->inviteExternalMembers(self::$accessToken, $createRoomResponse->reply->getRoomId(), $invitations);
        $this->assertFalse($inviteExternalMembersResponse->hasError);
        $this->assertNotEmpty($inviteExternalMembersResponse->reply->getTrackingInfo());
    }

    /**
     * Test case for businessLogicServiceFavoritesList
     *
     * .
     *
     */
    public function testBusinessLogicServiceFavoritesList()
    {
    }

    /**
     * Test case for businessLogicServiceFavoritesUpdate
     *
     * .
     *
     */
    public function testBusinessLogicServiceFavoritesUpdate()
    {
    }

    /**
     * Test case for businessLogicServiceInviteUsers
     *
     * .
     *
     */
    public function testBusinessLogicServiceInviteUsers()
    {
    }

    /**
     * Test case for businessLogicServicePermissionGroupsList
     *
     * .
     *
     */
    public function testBusinessLogicServicePermissionGroupsList()
    {
    }

    /**
     * Test case for businessLogicServicePermissionGroupsUpdate
     *
     * .
     *
     */
    public function testBusinessLogicServicePermissionGroupsUpdate()
    {
    }

    /**
     * Test case for businessLogicServiceSendEmail
     *
     * .
     *
     */
    public function testBusinessLogicServiceSendEmail()
    {
    }

    /**
     * Test case for businessLogicServiceStreamTaskProgress
     *
     * .
     *
     */
    public function testBusinessLogicServiceStreamTaskProgress()
    {
    }
}
